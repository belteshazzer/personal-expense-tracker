@{
    ViewData["Title"] = "Expenses";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/listStyle.css">
    
</head>
<body>
    <div class="container">

        <div class="actions">
            <div class="action-card" id="addExpenseBtn">
                <img src="https://cdn-icons-png.flaticon.com/128/5501/5501400.png" alt="add">
                <h6>add expense</h6>
            </div>
            <div class="action-card" id="addIncomeBtn">
                <img src="https://cdn-icons-png.flaticon.com/128/4212/4212305.png" alt="add">
                <h6>add income</h6>
            </div>
            <div class="action-card"  id="viewSummaryBtn">
                <img src="https://cdn-icons-png.flaticon.com/128/684/684831.png" alt="add">
                <h6>view summary</h6>
            </div>
            <div class="action-card" id="viewReportBtn">
                <img src="https://cdn-icons-png.flaticon.com/128/14234/14234658.png" alt="add">
                <h6>view report</h6>
            </div>
        </div>
        <div class="header">
            <h1>Income List</h1>
            <div class="balanceBox">
                <h2>Current Balance: <span id="currentBalance">$0.00</span></h2>
                <h3>Total Income: <span id="totalIncome">$0.00</span></h3>
                <h3>Total Expenses: <span id="totalExpense">$0.00</span></h3>
            </div>
        </div>

        <div class="table-responsive">
            <table id="incomeTable">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Income Source</th>
                        <th>Payment method</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="5" style="text-align: center;">Please wait...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Modal -->
    <div id="incomeModal" class="add-transaction-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Add Income</h2>
                <span class="close" id="closeModalBtn">&times;</span>
            </div>
            <div class="modal-body">
                <form id="incomeForm">
                    <label for="date">Date:</label>
                    <input type="date" id="date" name="date" required>
                    <label for="amount">Amount:</label>
                    <input type="number" id="amount" name="amount" required>
                    <label for="category">Income Source:</label>
                    <select id="category" name="category" required>
                        <option value="Salary">Salary</option>
                        <option value="Allowance">Allowance</option>
                        <option value="Business">Business</option>
                        <option value="Investment income">Investment income</option>
                        <option value="Bonus">Bonus</option>
                        <option value="Gift">Gift</option>
                        <option value="Other income">Other income</option>
                    </select>
                    <label for="payentMethod">Payment method:</label>
                    <input type="text" id="paymentMethod" name="paymentMethod" required>
                    <label for="description">Description:</label>
                    <textarea id="description" name="description" placeholder="Enter details about the income"></textarea>
                </form>
            </div>
            <div class="modal-footer">
                <button id="closeFooterBtn" class="btn-cancel">Cancel</button>
                <button id="saveIncomeBtn" class="btn-save">Save</button>
            </div>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const modal = document.getElementById("incomeModal");
            const addIncomeBtn = document.getElementById("addIncomeBtn");
            const closeModalBtn = document.getElementById("closeModalBtn");
            const closeFooterBtn = document.getElementById("closeFooterBtn");
            const saveExpenseBtn = document.getElementById("saveIncomeBtn");
            const tableBody = document.querySelector("#incomeTable tbody");
            let total_income = 0;
            let total_expense = 0;
            let currentBalance = 0;

            async function getTotalExpense(){

                const response = await fetch("/api/Expense/all");
                const expenses = await response.json();
                for (const expense of expenses) {
                    total_expense += parseFloat(expense.amount);
                }
            }

            const formatter = Intl.NumberFormat("en-US", {
                style: "currency",
                currency: "ETB",
                minimumFractionDigits: 2,
            });

            // Open modal
            addIncomeBtn.addEventListener("click", () => {
                modal.style.display = "block";
            });

            // Close modal
            const closeModal = () => (modal.style.display = "none");
            closeModalBtn.addEventListener("click", closeModal);
            closeFooterBtn.addEventListener("click", closeModal);

            window.addEventListener("click", (event) => {
                if (event.target === modal) closeModal();
            });

            // Fetch and display expenses
            async function fetchIncome() {
                try {

                    getTotalExpense();

                    const response = await fetch("/api/Income/all");
                    if (!response.ok) throw new Error("Failed to fetch expenses");

                    const incomes = await response.json();
                    if (!incomes.length) {
                        tableBody.innerHTML = `<tr><td colspan="4" style="text-align: center;">No expenses found.</td></tr>`;
                        return;
                    }
                                        
                    tableBody.innerHTML = ""; // Clear table
                    for (const income of incomes) {

                        total_income += parseFloat(income.amount);
                        
                        const row = `
                            <tr>
                                <td>${new Date(income.date).toLocaleDateString()}</td>
                                <td>$${income.amount.toFixed(2)}</td>
                                <td>${income.category}</td>
                                <td>${income.paymentMethod}</td>
                                <td>${income.description}</td>
                                <td class="row-actions">
                                    <i class="fas fa-edit" onclick="editExpense('${income._id}')"></i>
                                    <i class="fas fa-trash" onclick="deleteExpense('${income._id}')"></i>
                                </td>
                            </tr>`;
                        tableBody.innerHTML += row;
                    }

                    document.getElementById("totalIncome").innerHTML = formatter.format(total_income);
                    document.getElementById("totalExpense").innerHTML = formatter.format(total_expense);

                    if(total_income - total_expense < 0){
                        document.getElementById("currentBalance").style.color = "red";
                        currentBalance = 0;
                    }
                    document.getElementById("currentBalance").innerHTML = formatter.format(currentBalance);

                } catch (error) {
                    console.error(error);
                    tableBody.innerHTML = `<tr><td colspan="5" style="text-align: center; color: red;">Error loading expenses.</td></tr>`;
                }
            }

            fetchIncome();

        });

            // Save expense
        saveIncomeBtn.addEventListener("click", async () => {
            const form = document.getElementById("incomeForm");

            const formData = new FormData(form);
            const income = {
                _id: "",
                date: new Date(formData.get("date")).toISOString(), 
                category: formData.get("category"),
                amount: parseFloat(formData.get("amount")), 
                paymentMethod:formData.get("paymentMethod"),
                description: formData.get("description") || "",
            };
            try {
                const response = await fetch("api/Income", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(income),
                });

                if (!response.ok) throw new Error("Failed to save income");

                alert("income added successfully");
                closeModal();
                fetchIncome();
            } catch (error) {
                console.error(error);
                alert("Error saving income");
            }
        });

        // Edit and delete handlers
        window.editIncome = (id) => alert(`Edit expense: ${id}`);

        window.deleteIncome = async (id) => {
            console.log("Deleting income with ID:", id);
            
            if (!confirm("Are you sure you want to delete this income?")) return;

            try {
                const response = await fetch(`/api/Income/${id}`, { method: "DELETE" });
                if (!response.ok) throw new Error("Failed to delete income");

                alert("income deleted successfully");
                fetchIncome();
            } catch (error) {
                console.error(error);
                alert("Error deleting income");
            }
        };
        
    </script>
</body>
</html>
